// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RedBurnTradeFeed.DBContext;

namespace Database.Migrations
{
    [DbContext(typeof(TradeItemDBContext))]
    [Migration("20190710020144_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RedBurnTradeFeed.Models.TradeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("Currency");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Description");

                    b.Property<string>("OrderInstruction");

                    b.Property<string>("OrderTransmission");

                    b.Property<int>("Qty");

                    b.Property<int>("TradeType");

                    b.HasKey("Id");

                    b.ToTable("TradeData");

                    b.HasData(
                        new { Id = 1, Amount = 100m, Currency = "CAD", DateTime = new DateTime(2019, 7, 10, 3, 1, 44, 396, DateTimeKind.Local), Description = "", OrderInstruction = "day order", OrderTransmission = "broker", Qty = 100000, TradeType = 1 },
                        new { Id = 2, Amount = 200m, Currency = "EUR", DateTime = new DateTime(2019, 7, 10, 3, 1, 44, 404, DateTimeKind.Local), Description = "", OrderInstruction = "day order", OrderTransmission = "ATF", Qty = 200000, TradeType = 0 },
                        new { Id = 3, Amount = 300m, Currency = "GBP", DateTime = new DateTime(2019, 7, 10, 3, 1, 44, 404, DateTimeKind.Local), Description = "", OrderInstruction = "kill", OrderTransmission = "ECN", Qty = 300000, TradeType = 2 },
                        new { Id = 4, Amount = 400m, Currency = "CAD", DateTime = new DateTime(2019, 7, 10, 3, 1, 44, 404, DateTimeKind.Local), Description = "", OrderInstruction = "day order", OrderTransmission = "broker", Qty = 400000, TradeType = 1 },
                        new { Id = 5, Amount = 500m, Currency = "ZAR", DateTime = new DateTime(2019, 7, 10, 3, 1, 44, 404, DateTimeKind.Local), Description = "", OrderInstruction = "day order", OrderTransmission = "broker", Qty = 500000, TradeType = 0 },
                        new { Id = 6, Amount = 600m, Currency = "GBP", DateTime = new DateTime(2019, 7, 10, 3, 1, 44, 404, DateTimeKind.Local), Description = "", OrderInstruction = "kill", OrderTransmission = "ECN", Qty = 600000, TradeType = 2 },
                        new { Id = 7, Amount = 700m, Currency = "USD", DateTime = new DateTime(2019, 7, 10, 3, 1, 44, 404, DateTimeKind.Local), Description = "", OrderInstruction = "fill", OrderTransmission = "broker", Qty = 700000, TradeType = 1 }
                    );
                });

            modelBuilder.Entity("RedBurnTradeFeed.Models.TradeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("LastPrice");

                    b.Property<int>("Side");

                    b.Property<int>("Status");

                    b.Property<string>("Ticker");

                    b.Property<int?>("TradeDataId");

                    b.HasKey("Id");

                    b.HasIndex("TradeDataId");

                    b.ToTable("TradeItem");

                    b.HasData(
                        new { Id = 1, LastPrice = 1.11m, Side = 0, Status = 0, Ticker = "RTR" },
                        new { Id = 2, LastPrice = 1.12m, Side = 0, Status = 0, Ticker = "LLOYDS" },
                        new { Id = 3, LastPrice = 1.13m, Side = 0, Status = 0, Ticker = "DEUET" },
                        new { Id = 4, LastPrice = 1.14m, Side = 0, Status = 0, Ticker = "BARC" },
                        new { Id = 5, LastPrice = 1.15m, Side = 0, Status = 0, Ticker = "REDB" }
                    );
                });

            modelBuilder.Entity("RedBurnTradeFeed.Models.TradeItem", b =>
                {
                    b.HasOne("RedBurnTradeFeed.Models.TradeData")
                        .WithMany("TradeItems")
                        .HasForeignKey("TradeDataId");
                });
#pragma warning restore 612, 618
        }
    }
}
